apiVersion: batch/v1
kind: Job
metadata:
  name: generate-talos-config-secret
spec:
  template:
    spec:
      serviceAccountName: generate-talos-config-secret
      restartPolicy: OnFailure
      volumes:
        - name: talos-config
      initContainers:
      - name: talos-gen-config
        workingDir: /talos-config
        image: ghcr.io/talos-systems/talosctl
        args:
        - gen
        - config
        - $(CLUSTER_NAME)
        - https://$(CONTROLPLANE_SERVICE_FQDN):$(CONTROLPLANE_SERVICE_PORT)
        envFrom:
        - configMapRef:
            name: config
        volumeMounts:
        - name: talos-config
          mountPath: /talos-config
      - name: tink-config
        workingDir: /talos-config
        image: docker.io/mikefarah/yq
        command:
        - sh
        - -ec
        - |-
          podSubnets="${POD_SUBNETS}"
          serviceSubnets="${SERVICE_SUBNETS}"
          certSANs="${CERT_SANS}"
          dnsDomain="${CLUSTER_DOMAIN}"

          nameservers="${NAMESERVERS}"
          if [ -z "${nameservers}" ]; then
            nameservers="$(cat /etc/resolv.conf|grep -E '^nameserver '|awk '{print $2}')"
            nameservers='["'${nameservers}'"]'
          fi

          config_set() {
            expr="${1}"
            value="${2}"
            yq eval --inplace "${expr} = ${value}" init.yaml
            yq eval --inplace "${expr} = ${value}" controlplane.yaml
            yq eval --inplace "${expr} = ${value}" join.yaml
          }

          config_set ".machine.network.nameservers" "${nameservers}"
          config_set ".machine.certSANs" "${certSANs}"
          config_set ".cluster.apiServer.certSANs" "${certSANs}"
          config_set ".cluster.network.dnsDomain" "\"${dnsDomain}\""
          config_set ".cluster.network.podSubnets" "${podSubnets}"
          config_set ".cluster.network.serviceSubnets" "${serviceSubnets}"
        envFrom:
        - configMapRef:
            name: config
        volumeMounts:
        - name: talos-config
          mountPath: /talos-config
      containers:
      - name: kubectl-create-secret
        workingDir: /talos-config
        image: docker.io/bitnami/kubectl
        args:
        - create
        - secret
        - generic
        - $(CLUSTER_NAME)
        - --from-file=controlplane.yaml
        - --from-file=init.yaml
        - --from-file=join.yaml
        - --from-file=talosconfig
        envFrom:
        - configMapRef:
            name: config
        volumeMounts:
        - name: talos-config
          mountPath: /talos-config
